from bs4 import BeautifulSoup
from .docset import DocSet, TextChunk, FigureChunk, TableChunk, ChunkType
from pathlib import Path
#new
from datetime import datetime, timezone, timedelta
import arxiv
import os
import requests
from urllib.parse import urljoin
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import json
import time
import re
from typing import List, Tuple
import base64
from volcengine.visual.VisualService import VisualService
from spire.pdf.common import *
from spire.pdf import *
from abc import ABC, abstractmethod

class BasePDFExtractor(ABC):
    """Abstract base classes of the PDF extractor"""

    def __init__(self, docs, pdf_folder_path, image_folder_path, arxiv_pool, json_path, volcengine_ak, volcengine_sk, start_time, end_time):
        """
        Args:
        html_text_folder: the folder path used to store the .html file.
        pdf_folder_path: the folder path used to store the .pdf (and .md) file.
        arxiv_pool: path of a .txt file to store the arxiv_id which is serialized successfully
        image_folder_path:  the folder path used to store the .png file.
        json_path: the folder path used to store the .json file.
        volcengine_ak: get from https://console.volcengine.com/ai/ability/info/72
        volcengine_sk: get from https://console.volcengine.com/ai/ability/info/72
        start_time: the earliest paper you want
        end_time: the last paper you want
        """
        if docs is None:
            self.docs = []
        else:
            self.docs = docs
        self.pdf_folder_path = pdf_folder_path
        self.image_folder_path = image_folder_path
        self.pdf_paths = []
        self.arxiv_pool = arxiv_pool
        self.json_path = json_path
        self.date = datetime.now(timezone.utc).date()
        self.ak = volcengine_ak
        self.sk = volcengine_sk
        self.start_time = start_time
        self.end_time = end_time

    @abstractmethod
    def extract_all(self):
        """Carry out the complete extraction process"""
        pass

    @abstractmethod
    def remain_docparser(self):
        """provide help for HTMLparser"""
        pass

    @abstractmethod
    def init_docset(self):
        """Initialize the document metadata"""
        pass

    @abstractmethod
    def serialize_docs(self):
        """Serialize the extraction results into JSON"""
        pass

    @abstractmethod
    def pdf_text_chunk(self, markdown_path):
        """Extract the text chunk from Markdown produced by PDF"""
        pass

    @abstractmethod
    def pdf_images_chunk(self, markdown_path, image_folder_path, doc_id):
        """Extract the img chunk from Markdown produced by PDF"""
        pass

    @abstractmethod
    def pdf_tables_chunk(self, markdown_path):
        """Extract the table chunk from Markdown produced by PDF"""
        pass

class ArxivPDFExtractor(BasePDFExtractor):
    """
    A class used to extract information from daily arXiv PDFs and serialize it into JSON files.
    """
    def init_docset(self):
        """
        Initialize the docset with papers' some metadata:
        doc_id, title, authors, categories, published_date, abstract, pdf_path, HTML_path
        The 3 types of chunk remain to add
        """
        client = arxiv.Client()
        query = "cat:cs.* AND submittedDate:[" + self.start_time + " TO " + self.end_time + "]"
        search = arxiv.Search(
            query=query,
            max_results=None,  # You can set max papers you want here
            sort_by=arxiv.SortCriterion.SubmittedDate
        )
        print(f"grabbing arXiv papers in cs.* submitted from {self.start_time} to {self.end_time}......")

        tem = client.results(search)
        tem = list(tem)
        print("successful search!")
        for result in tem:
            print(1)
            arxiv_id = result.pdf_url.split('/')[-1]
            print(2)
            with open(self.arxiv_pool, "r", encoding="utf-8") as f:
                if arxiv_id in f.read():
                    print(f"{arxiv_id} is already extracted before!")
                    continue
            #add basic info
            print(3)
            add_doc = DocSet(
            doc_id=arxiv_id,
            title=result.title,
            authors=[author.name for author in result.authors],
            categories=result.categories,
            published_date=str(result.published),
            abstract=result.summary,
            pdf_path=str(os.path.join(self.pdf_folder_path, f'{arxiv_id}.pdf')),
            #Set htmlpath to None first and update it later
            HTML_path=None )
            print(4)

            print(arxiv_id)
            #download_arxiv_pdf(arxiv_id, self.pdf_folder_path)
            #result.download_pdf(dirpath = self.pdf_folder_path, filename=f"{arxiv_id}.pdf")
            success = download_paper(
                result=result,
                save_path=self.pdf_folder_path,
                filename=f"{arxiv_id}.pdf"
            )
            if not success:
                print(f"‚ùå ËÆ∫Êñá {result.title} ‰∏ãËΩΩÊúÄÁªàÂ§±Ë¥•")

            print(5)

            self.docs.append(add_doc)

        #self.serialize_docs_init()

    def extract_all(self):
        """"All in one function"""
        self.init_docset()
        for doc in self.docs:
            path = doc.pdf_path
            print("getting markdown...")
            markdown_path = get_pdf_md(path,self.pdf_folder_path,doc.doc_id,self.ak,self.sk)
            print("done, begin chunking")
            if markdown_path:
                doc.figure_chunks = self.pdf_images_chunk(markdown_path,self.image_folder_path,doc.doc_id)
                doc.table_chunks = self.pdf_tables_chunk(markdown_path)
                doc.text_chunks = self.pdf_text_chunk(markdown_path)#‰∏ÄÂÆöÂú®ÊúÄÂêé
        self.serialize_docs()

    def remain_docparser(self):
        """
        Help HTMLExtractor. We don't use it in the process of PDF's extractor
        """
        for doc in self.docs:
            if doc.HTML_path == None and doc.pdf_path is not None:
                path = doc.pdf_path
                print("getting markdown...")
                markdown_path = get_pdf_md(path,self.pdf_folder_path,doc.doc_id,self.ak,self.sk)
                print("done, begin chunking")
                if markdown_path:
                    doc.figure_chunks = self.pdf_images_chunk(markdown_path,self.image_folder_path,doc.doc_id)
                    doc.table_chunks = self.pdf_tables_chunk(markdown_path)
                    doc.text_chunks = self.pdf_text_chunk(markdown_path)#‰∏ÄÂÆöÂú®ÊúÄÂêé
            elif doc.pdf_path == None:
                print("Neither PDF or HTML is avaliable.")
                   
    def pdf_images_chunk(self, markdown_path, image_folder_path, doc_id):
        figures = []

        try:
            # read Markdown
            with open(markdown_path, 'r', encoding='utf-8') as f:
                md_content = f.read()
                
            image_list = _parse_image_urls(md_content, doc_id)
            if not image_list:
                print("Warning: No image link was found in Markdown")
                return figures
                
            os.makedirs(image_folder_path, exist_ok=True)
            
            # download
            success_count = 0
            for name, url, caption in image_list:
                if _download_single_image(name, url, image_folder_path):
                    success_count += 1
                    figures.append(FigureChunk(
                        id = None,
                        title = name,
                        type = ChunkType.FIGURE,
                        image_path = str(os.path.join(image_folder_path, name)),
                        alt_text = "Refer to caption",
                        caption = caption
                    ))
            
            print(f"\nüìå Download completed: process{len(image_list)} figures totally, {success_count} Successfully")
            
        except FileNotFoundError:
            print(f"Error: Markdown Not Found - {markdown_path}")
            
        except Exception as e:
            print(f"program exception:{str(e)}")
        
        #print(figures)
        return figures
        
    def pdf_tables_chunk(self, markdown_path):
        tables = []
        try:
            with open(markdown_path, 'r', encoding='utf-8') as f:
                md_content = f.read()

            soup = BeautifulSoup(md_content, 'html.parser')
            all_tables = soup.find_all('table')

            for idx, table in enumerate(all_tables):
                table_html = str(table)

                # Find the text position of this table in the Markdown content
                table_pos = md_content.find(table_html)
                context_before = md_content[max(0, table_pos - 500):table_pos]

                # Look for the Table title from the previous text
                caption_match = re.search(r'(Table\s*\d+[.:]?\s*)([^\n<]+)', context_before, re.IGNORECASE)
                if caption_match:
                    table_name = caption_match.group(1).strip().replace(':', '').replace('.', '')
                    caption_text = caption_match.group(2).strip()
                else:
                    table_name = f'table_{idx+1}'
                    caption_text = ''

                tables.append(TableChunk(
                    id=None,
                    title=table_name,
                    type=ChunkType.TABLE,
                    table_html=table_html,
                    caption=caption_text
                ))
                

        except FileNotFoundError:
            print(f"Error: Markdown Not Found - {markdown_path}")
        except Exception as e:
            print(f"program exception:{str(e)}")
        #print(tables)
        return tables
    
    def pdf_text_chunk(self, markdown_path) -> List[TextChunk]:
        all_text = []

        try:
            with open(markdown_path, 'r', encoding='utf-8') as f:
                md_content = f.read()
            md_content = re.sub(r'^!\[fig_[^\n]*\n?', '', md_content, flags=re.MULTILINE)

            # Êü•ÊâæÊâÄÊúâ‰∏ÄÁ∫ßÊ†áÈ¢òÔºà## ÂºÄÂ§¥ÔºåÊéíÈô§Â¶Ç 2.1 ÂºÄÂ§¥ÁöÑÂ≠êÊ†áÈ¢òÔºâ
            pattern = r'(?:^|\n)(##\s+(?!(?:[A-Za-z]+\.)?\d+\.\d+)[^\n]+)'
            matches = list(re.finditer(pattern, md_content))

            # ‰∏∫Êñπ‰æøÂ§ÑÁêÜÔºåËÆ∞ÂΩïÊâÄÊúâÊÆµËêΩËµ∑Âßã‰ΩçÁΩÆ
            section_boundaries = [m.start() for m in matches]
            section_boundaries.append(len(md_content))  # Âä†ÂÖ•ÊúÄÂêéÁöÑÁªàÁÇπ

            for i in range(len(matches)):
                start = section_boundaries[i]
                end = section_boundaries[i + 1]
                section_text = md_content[start:end].strip()

                header_line = matches[i].group(1).strip()
                title = header_line.lstrip('#').strip()

                section_id = f"text_{i+1}"

                all_text.append(TextChunk(
                    id=section_id,
                    type=ChunkType.TEXT,
                    title=title,
                    caption=title,
                    text=section_text
                ))

        except FileNotFoundError:
            print(f"ÈîôËØØÔºöMarkdownÊñá‰ª∂Êú™ÊâæÂà∞ - {markdown_path}")
        except Exception as e:
            print(f"Á®ãÂ∫èÂºÇÂ∏∏Ôºö{str(e)}")
        return all_text
    
    def serialize_docs(self):
        """
        Serialize the extracted documents into JSON files.
        """
        output_dir = self.json_path
        for doc in self.docs:
            with open(self.arxiv_pool, "a", encoding="utf-8") as f:
                f.write(doc.doc_id+'\n')
            output_path = Path(output_dir) / f"{doc.doc_id}.json"
            with open(output_path, "w", encoding="utf-8") as f:
                doc_dict = doc.model_dump()
                json_str = json.dumps(doc_dict, indent=4)
                f.write(json_str)

############################################################### Some Tools ####################################################################
    
def compress_pdf(input_path: str, output_path: str = None, max_size_mb: float = 7.5) -> str:
    """
    ÂéãÁº©PDFÊñá‰ª∂ÔºåÂ¶ÇÊûúÊñá‰ª∂Â§ßÂ∞èË∂ÖËøáÊåáÂÆöÂÄº
    
    Args:
        input_path: ËæìÂÖ•PDFÊñá‰ª∂Ë∑ØÂæÑ
        output_path: ËæìÂá∫PDFÊñá‰ª∂Ë∑ØÂæÑÔºåÂ¶ÇÊûú‰∏∫NoneÂàôË¶ÜÁõñÂéüÊñá‰ª∂
        max_size_mb: ÊúÄÂ§ßÊñá‰ª∂Â§ßÂ∞èÔºàMBÔºâ
    
    Returns:
        str: ÂéãÁº©ÂêéÁöÑÊñá‰ª∂Ë∑ØÂæÑÔºåÂ¶ÇÊûúÂéãÁº©Â§±Ë¥•ÂàôËøîÂõûÂéüÊñá‰ª∂Ë∑ØÂæÑ
    """
    if output_path is None:
        output_path = input_path
    
    # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
    file_size_mb = os.path.getsize(input_path) / (1024 * 1024)
    if file_size_mb <= max_size_mb:
        print(f"üìÑ PDF Êñá‰ª∂Â§ßÂ∞è ({file_size_mb:.2f}MB) Êú™Ë∂ÖËøá {max_size_mb}MBÔºåÊó†ÈúÄÂéãÁº©")
        return input_path
    
    print(f"üì¶ PDF Êñá‰ª∂Â§ßÂ∞è ({file_size_mb:.2f}MB) Ë∂ÖËøá {max_size_mb}MBÔºåÂºÄÂßãÂéãÁº©...")
    
    try:
        # ÂàõÂª∫PdfCompressorÂØπË±°Âπ∂‰º†ÂÖ•PDFÊñá‰ª∂
        compressor = PdfCompressor(input_path)

        # Ëé∑ÂèñOptimizationOptionsÂØπË±°
        options = compressor.OptimizationOptions

        # ÂéãÁº©Â≠ó‰Ωì
        options.SetIsCompressFonts(True)
        # ÂèñÊ∂àÂ≠ó‰ΩìÂµåÂÖ•
        # options.SetIsUnembedFonts(True)

        # ËÆæÁΩÆÂõæÁâáË¥®Èáè
        options.SetImageQuality(ImageQuality.Medium)
        # Ë∞ÉÊï¥ÂõæÁâáÂ§ßÂ∞è
        options.SetResizeImages(True)
        # ÂéãÁº©ÂõæÁâá
        options.SetIsCompressImage(True)

        # ÂéãÁº©PDFÊñá‰ª∂Âπ∂‰øùÂ≠ò
        compressor.CompressToFile(output_path)
        new_size_mb = os.path.getsize(output_path) / (1024 * 1024)
        compression_ratio = (1 - new_size_mb/file_size_mb) * 100
        
        print(f"‚úÖ PDFÂéãÁº©ÂÆåÊàê: {file_size_mb:.2f}MB -> {new_size_mb:.2f}MB (ÂéãÁº©Áéá: {compression_ratio:.1f}%)")
        return output_path
    except Exception as e:
        print(f"‚ö†Ô∏è PDFÂéãÁº©Â§±Ë¥•: {str(e)}")
        return input_path

def verify_pdf(file_path: str) -> bool:
    """
    È™åËØÅPDFÊñá‰ª∂ÊòØÂê¶ÊúâÊïà
    
    Args:
        file_path: PDFÊñá‰ª∂Ë∑ØÂæÑ
    
    Returns:
        bool: Êñá‰ª∂ÊòØÂê¶ÊúâÊïà
    """
    try:
        with open(file_path, 'rb') as f:
            header = f.read(5)
            if not header.startswith(b'%PDF-'):
                print(f"‚ùå {file_path} ‰∏çÊòØÊúâÊïàÁöÑPDFÊñá‰ª∂")
                return False
        return True
    except Exception as e:
        print(f"‚ùå È™åËØÅPDFÊñá‰ª∂Â§±Ë¥• {file_path}: {str(e)}")
        return False

def download_pdf_with_retry(url: str, save_path: str, filename: str, max_retries: int = 3) -> bool:
    """
    ‰ΩøÁî®ÈáçËØïÊú∫Âà∂‰∏ãËΩΩPDFÊñá‰ª∂
    
    Args:
        url: PDFÊñá‰ª∂ÁöÑURL
        save_path: ‰øùÂ≠òË∑ØÂæÑ
        filename: Êñá‰ª∂Âêç
        max_retries: ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞
    
    Returns:
        bool: ‰∏ãËΩΩÊòØÂê¶ÊàêÂäü
    """
    session = requests.Session()
    retries = Retry(
        total=max_retries,
        backoff_factor=1,
        status_forcelist=[500, 502, 503, 504]
    )
    session.mount('http://', HTTPAdapter(max_retries=retries))
    session.mount('https://', HTTPAdapter(max_retries=retries))
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (compatible; AIgniteBot/1.0; +https://github.com/Algnite-Solutions/AIgnite)',
        'Accept': 'application/pdf'
    }
    
    temp_path = os.path.join(save_path, f"{filename}.tmp")
    final_path = os.path.join(save_path, filename)
    
    try:
        # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
        os.makedirs(save_path, exist_ok=True)
        
        # ‰∏ãËΩΩÊñá‰ª∂
        response = session.get(url, headers=headers, stream=True, timeout=30)
        response.raise_for_status()
        
        # Ëé∑ÂèñÊñá‰ª∂Â§ßÂ∞è
        total_size = int(response.headers.get('content-length', 0))
        
        # ‰ΩøÁî®‰∏¥Êó∂Êñá‰ª∂‰∏ãËΩΩ
        with open(temp_path, 'wb') as f:
            downloaded_size = 0
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    downloaded_size += len(chunk)
        
        # È™åËØÅÊñá‰ª∂Â§ßÂ∞è
        if total_size > 0 and downloaded_size != total_size:
            raise ValueError(f"Êñá‰ª∂Â§ßÂ∞è‰∏çÂåπÈÖç: È¢ÑÊúü {total_size} Â≠óËäÇÔºåÂÆûÈôÖ‰∏ãËΩΩ {downloaded_size} Â≠óËäÇ")
        
        # È™åËØÅPDFÊñá‰ª∂
        with open(temp_path, 'rb') as f:
            header = f.read(5)
            if not header.startswith(b'%PDF-'):
                raise ValueError("Êñá‰ª∂‰∏çÊòØÊúâÊïàÁöÑPDFÊ†ºÂºè")
        
        # Â¶ÇÊûúÈ™åËØÅÈÄöËøáÔºåÈáçÂëΩÂêç‰∏¥Êó∂Êñá‰ª∂
        if os.path.exists(final_path):
            os.remove(final_path)
        os.rename(temp_path, final_path)
        
        print(f"‚úÖ ÊàêÂäü‰∏ãËΩΩ: {filename}")
        return True
        
    except Exception as e:
        print(f"‚ùå ‰∏ãËΩΩÂ§±Ë¥• {filename}: {str(e)}")
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return False

def download_paper(result, save_path: str, filename: str) -> bool:
    """
    ‰∏ãËΩΩËÆ∫ÊñáÔºåÂÖàÂ∞ùËØï‰ΩøÁî®arxiv APIÔºåÂ¶ÇÊûúÂ§±Ë¥•Âàô‰ΩøÁî®ÂèØÈù†‰∏ãËΩΩÊñπÊ≥ï
    
    Args:
        result: arxivÊêúÁ¥¢ÁªìÊûú
        save_path: ‰øùÂ≠òË∑ØÂæÑ
        filename: Êñá‰ª∂Âêç
    
    Returns:
        bool: ‰∏ãËΩΩÊòØÂê¶ÊàêÂäü
    """
    file_path = os.path.join(save_path, filename)
    
    # Á¨¨‰∏ÄÊ≠•ÔºöÂ∞ùËØï‰ΩøÁî®arxiv API‰∏ãËΩΩ
    try:
        print(f"Â∞ùËØï‰ΩøÁî®arxiv API‰∏ãËΩΩ: {filename}")
        result.download_pdf(dirpath=save_path, filename=filename)
        
        # È™åËØÅ‰∏ãËΩΩÁöÑÊñá‰ª∂
        if verify_pdf(file_path):
            print(f"‚úÖ arxiv API‰∏ãËΩΩÊàêÂäü: {filename}")
            return True
        else:
            print(f"‚ö†Ô∏è arxiv API‰∏ãËΩΩÁöÑÊñá‰ª∂Êó†ÊïàÔºåÂ∞ùËØï‰ΩøÁî®ÂèØÈù†‰∏ãËΩΩÊñπÊ≥ï...ËøôÂèØËÉΩÈúÄË¶ÅÁ®çÂæÆÈïø‰∏ÄÁÇπÁöÑÊó∂Èó¥„ÄÇ")
            if os.path.exists(file_path):
                os.remove(file_path)
    except Exception as e:
        print(f"‚ùå arxiv API‰∏ãËΩΩÂ§±Ë¥•: {str(e)}")
        if os.path.exists(file_path):
            os.remove(file_path)
    
    # Á¨¨‰∫åÊ≠•Ôºö‰ΩøÁî®ÂèØÈù†‰∏ãËΩΩÊñπÊ≥ï
    print(f"‰ΩøÁî®ÂèØÈù†‰∏ãËΩΩÊñπÊ≥ï‰∏ãËΩΩ: {filename}")
    return download_pdf_with_retry(
        url=result.pdf_url,
        save_path=save_path,
        filename=filename
    )

def get_img_from_url(arxivid,img_src):
    time.sleep(1)
    session = requests.Session()
    retries = Retry(total=3, backoff_factor=1, status_forcelist=[502, 503, 504])
    adapter = HTTPAdapter(max_retries=retries)
    session.mount("http://", adapter)
    session.mount("https://", adapter)

    headers = {
        "User-Agent": "Mozilla/5.0 (compatible; AIgniteBot/1.0; +https://github.com/Algnite-Solutions/AIgnite)"
    }

    img_url = urljoin(f"https://arxiv.org/html/{str(arxivid)}/", img_src)
    #print(f"[INFO] Fetching image from: {img_url}")

    try:
        response = session.get(img_url, headers=headers, timeout=10)
        response.raise_for_status()
        img_data = response.content
        return img_data
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Failed to fetch image {img_url}: {e}")
        return None

def get_pdf_md(path,store_path,name,ak,sk):
    visual_service = VisualService()
    # call below method if you dont set ak and sk in $HOME/.volc/config
    visual_service.set_ak(ak)
    visual_service.set_sk(sk)

    params = dict()
    pdf_content = None

    # ‰ΩøÁî® with ËØ≠Âè•Á°Æ‰øùÊñá‰ª∂Ê≠£Á°ÆÂÖ≥Èó≠
    with open(str(path), 'rb') as f:
        pdf_content = f.read()
        
    if os.path.getsize(path) > 7.5*1024*1024:
        print(f"üì¶ PDF Ë∂ÖËøá 7.5MBÔºåÈúÄË¶ÅÂéãÁº©„ÄÇ")
        try:
            compressed_path = compress_pdf(path)
            print(f"‚úÖ PDFÂéãÁº©ÂÆåÊàêÔºå‰ΩøÁî®ÂéãÁº©ÂêéÁöÑÊñá‰ª∂")
            path = compressed_path
            with open(str(path), 'rb') as f:
                pdf_content = f.read()
        except Exception as e:
            print(f"‚ö†Ô∏è ÂéãÁº©Â§±Ë¥•Ôºö{e}")
            return None
    
    form = {
        "image_base64": base64.b64encode(pdf_content).decode(),   # Êñá‰ª∂binary ÂõæÁâá/PDF 
        "image_url": "",                  # url
        "version": "v3",                  # ÁâàÊú¨
        "page_start": 0,                  # Ëµ∑ÂßãÈ°µÊï∞
        "page_num": 16,                   # Ëß£ÊûêÈ°µÊï∞
        "table_mode": "html",             # Ë°®Ê†ºËß£ÊûêÊ®°Âºè
        "filter_header": "true"           # ËøáÊª§È°µÁúâÈ°µËÑöÊ∞¥Âç∞
    }

    # ËØ∑Ê±Ç
    try:
        resp = visual_service.ocr_pdf(form)
        if not resp or "data" not in resp:
            print("‚ùå OCRËØ∑Ê±ÇÂ§±Ë¥•ÔºöÂìçÂ∫îÊ†ºÂºè‰∏çÊ≠£Á°Æ")
            return None
            
        markdown = resp["data"].get("markdown")
        if not markdown:
            print("‚ùå OCRËØ∑Ê±ÇÂ§±Ë¥•ÔºöÊú™Ëé∑ÂèñÂà∞markdownÂÜÖÂÆπ")
            return None

        # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
        os.makedirs(store_path, exist_ok=True)
        # ÂÆåÊï¥Êñá‰ª∂Ë∑ØÂæÑ
        file_path = os.path.join(store_path, f"{name}.md")

        # ÂÜôÂÖ•Êñá‰ª∂
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(markdown)

        return file_path

    except Exception as e:
        print(f"‚ùå OCRËØ∑Ê±ÇÂ§±Ë¥•Ôºö{str(e)}")
        return None

def _parse_image_urls(content: str,arxiv_id) -> List[Tuple[str, str, str]]:
    """ÂÜÖÈÉ®ÂáΩÊï∞ÔºöËß£ÊûêÂõæÁâáURLÂπ∂ÊèêÂèñÁ¨¶ÂêàËßÑÂàôÁöÑÂêçÁß∞"""
    # Ê≠£ÂàôËßÑÂàôËØ¥ÊòéÔºö
    # 1. ÂåπÈÖç![‰ªªÊÑèÂÜÖÂÆπ](URL) Ê†ºÂºè
    # 2. ÊèêÂèñÂêçÁß∞ÔºöÂú®`)`‰πãÂêéÔºåÂØªÊâæ‰ª•F/fÂºÄÂ§¥„ÄÅÁ¨¨‰∏Ä‰∏™Êï∞Â≠óÁªìÂ∞æÁöÑÂ≠óÁ¨¶‰∏≤
    pattern = r'!\[.*?\]\((https?://[^\)]+)\)'  # ÂÖàÊèêÂèñÊâÄÊúâÂõæÁâáÈìæÊé•
    all_matches = re.findall(pattern, content)
    
    image_info = []
    for url in all_matches:
        # ‰ªéURLÂâçÂêéÁöÑ‰∏ä‰∏ãÊñá‰∏≠ÊèêÂèñÂêçÁß∞ÔºàÂÅáËÆæÂêçÁß∞Âú®`)`‰πãÂêéÔºåÊ†ºÂºè‰∏∫F/fÂºÄÂ§¥+Êï∞Â≠óÁªìÂ∞æÔºâ
        # Á§∫‰æãÔºö`) Fig_1"` Êàñ `) fig3. `
        name = _extract_name_from_context(content, url)
        name = arxiv_id+'_'+name
        caption = _extract_caption_from_context(content, url)
        if name:
            image_info.append((name, url, caption))
    return image_info

def _extract_name_from_context(content: str, url: str) -> str:
    """‰ªéURLÂêéÁöÑÊñáÊú¨‰∏≠ÊèêÂèñ‰ª•FÂºÄÂ§¥„ÄÅÊï∞Â≠óÁªìÂ∞æÁöÑÂêçÁß∞ÔºåÂéªÈô§ÁÇπÂíåÁ©∫Ê†º"""
    # ÂÆö‰ΩçURLÂú®ÊñáÊú¨‰∏≠ÁöÑ‰ΩçÁΩÆÔºàÊü•ÊâæURLÂêéÁöÑÂÜÖÂÆπÔºâ
    url_end = content.find(url) + len(url)
    post_url_content = content[url_end:].strip()  # Ëé∑ÂèñURL‰πãÂêéÁöÑÊñáÊú¨
    
    # Ê≠£ÂàôÂåπÈÖçÔºö‰ª•FÂºÄÂ§¥Ôºå‰ªªÊÑèÂ≠óÁ¨¶ÔºàÊéíÈô§ÁÇπÂíåÁ©∫Ê†ºÔºâÔºå‰ª•Êï∞Â≠óÁªìÂ∞æ
    pattern = r'(fig(?:ure)?\.?\s*\d+)'
    match = re.search(pattern, post_url_content, re.IGNORECASE)  # ‰∏çÂå∫ÂàÜÂ§ßÂ∞èÂÜô
    
    if match:
        # ÊèêÂèñÂåπÈÖçÂÜÖÂÆπÂπ∂ÂéªÈô§ÁÇπÂíåÁ©∫Ê†º
        raw_name = match.group(0)
        cleaned_name = raw_name.replace('.', '').replace(' ', '')  # ÂéªÈô§ÁÇπÂíåÁ©∫Ê†º
        
        # È¶ñÂ≠óÊØçÂ§ßÂÜô
        cleaned_name = cleaned_name[0].upper() + cleaned_name[1:]
        
        # Â∞ÜFigÂºÄÂ§¥ËΩ¨Êç¢‰∏∫FigureÂºÄÂ§¥
        if cleaned_name.startswith('Fig') and not cleaned_name.startswith('Figure'):
            cleaned_name = 'Figure' + cleaned_name[3:]
            
        return cleaned_name
    return ""

def _extract_caption_from_context(content: str, url: str) -> str:
    """‰ªé URL ÂêéÊèêÂèñÂõæÊ≥®ÊñáÊú¨ÔºåÁõ¥Âà∞‰∏ã‰∏Ä‰∏™Êç¢Ë°åÁ¨¶"""
    url_end = content.find(url) + len(url)
    post_url_content = content[url_end:].lstrip()

    # ÊèêÂèñ‰ªé 'Fig' ÂºÄÂ§¥Âà∞Êç¢Ë°åÁ¨¶ÁªìÊùüÁöÑ‰∏ÄÊï¥Ë°å‰Ωú‰∏∫ caption
    match = re.search(r'(fig(?:ure)?\.?\s*\d+[a-zA-Z]?\.*.*?)\n', post_url_content, re.IGNORECASE | re.DOTALL)
    if match:
        return match.group(1).strip()
    return ""

def _download_single_image(name: str, url: str, save_dir: str) -> bool:
    """ÂÜÖÈÉ®ÂáΩÊï∞Ôºö‰∏ãËΩΩÂçïÂº†ÂõæÁâá"""
    try:
        response = requests.get(url, stream=True, timeout=15)
        response.raise_for_status()
        
        # Â§ÑÁêÜÊñá‰ª∂Êâ©Â±ïÂêçÔºàÊîØÊåÅURL‰∏≠Â∏¶Êü•ËØ¢ÂèÇÊï∞ÁöÑÊÉÖÂÜµÔºâ
        '''ext = url.split('.')[-1].split('?')[0].lower()
        if ext not in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff']:
            ext = 'png'  # ÈªòËÆ§Êâ©Â±ïÂêç'''
        
        ext = 'png'
        
        file_name = f"{name}.{ext}"
        save_path = os.path.join(save_dir, file_name)
        
        with open(save_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"‚úÖ ÊàêÂäü‰∏ãËΩΩÔºö{name} -> {save_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå ‰∏ãËΩΩÂ§±Ë¥• {url}Ôºö{str(e)}")
        return False